/**
 * connection.js
 *
 * Set up the connection for your remote data source.
 * You must set either "url" or "toUrl".
 * Use "url" if the url is static or can be generated by substituting context vars.
 * Use "toUrl" if you need to dynamically create the url based on subjects and aspects.
 *
 * DO NOT modify the function signature.
 * DO NOT import or require any other modules.
 * DO NOT modify the module.exports (for testing).
 */

module.exports = {

  /**
   * Url (optional)
   *
   * Specify a url string to use for collection.
   * You can use context variables with {{var}}.
   */
  //url: 'http://www.example.com',

  /**
   * ToUrl (optional)
   *
   * Implement a function that returns a url string to use for collection.
   * @param {Object} ctx - The context from the Sample Generator
   * @param {Array} aspects - Array of one or more aspects
   * @param {Array} subjects - Array of one or more subjects
   * @returns {String} the url to be used for collection
   */
  //toUrl(ctx, aspects, subjects) {
  //  return 'http://www.example.com';
  //},

  /**
   * Headers (optional)
   *
   * Specify the HTTP headers to include in the request.
   * You can use context variables with {{var}}.
   */
  //headers: {
  //  Accept: 'application/json',
  //},

  /**
   * ContextDefinition (optional)
   *
   * Define context variables that the transform function relies on here.
   * The values that get passed in to the transform will be assigned in the
   * Sample Generator. You can also specify a default value here, to be used if
   * "required" is false and no value is set.
   */
  contextDefinition: {
    //var1: {
    //  description: 'description...',
    //  required: false,
    //  default: 4,
    //},
  },

  /**
   * Helpers (optional)
   *
   * Define helper functions to be used in toUrl.
   */
  helpers: {
    //concatArray(arr) {
    //  return arr.map((e) => e.name).join(',');
    //},
  },
}
